classdef ConformalMappingComputer < handle
    
    properties (Access = private)
       phi
       theta 
       mesh
       dilation
    end
    
    methods (Access = public)
        
        function obj = ConformalMappingComputer(cParams)
            obj.init(cParams);            
        end
        
        function phi = compute(obj)
            obj.computeDilation();
            phi(:,1) = obj.computeFirstComponent();
            phi(:,2) = obj.computeSecondComponent();
        end
        
        function plot(obj)
            obj.plotDilation();
            obj.plotMapping();
        end
        
    end
    
    methods (Access = private)
        
        function plotDilation(obj)
            x = obj.mesh.coord(:,1);
            y = obj.mesh.coord(:,2);
            z = obj.dilation;
            F = scatteredInterpolant(x,y,z);
            n  =100;
            [xv,yv] = meshgrid(min(x):1/n:max(x),min(y):1/n:max(y));
            zv = F(xv,yv);
            %zv = griddata(x,y,z,xv,yv);
            surf(xv,yv,zv);
            %contour(xv,yv,zv,50,'LineWidth',5);
            view(0,90)
            colorbar
            shading interp
        end
        
        function plotMapping(obj)
           phi1 = obj.phi(:,1);
           phi2 = obj.phi(:,2);
           obj.plotContour(phi1); 
           obj.plotContour(phi2);
        end
        
        function plotContour(obj)
            x = obj.mesh.coord(:,1);
            y = obj.mesh.coord(:,2);
            z = obj.dilation;
            z = phi(:,2);
            F = scatteredInterpolant(x,y,z);
            n  =100;
            [xv,yv] = meshgrid(min(x):1/n:max(x),min(y):1/n:max(y));
            %zv = F(xv,yv);
            zv = griddata(x,y,z,xv,yv);
            %surf(xv,yv,zv);
            contour(xv,yv,zv,50,'LineWidth',5);
            view(0,90)
            colorbar
            %shading interp               
        end
        
        
        function init(obj,cParams)
            obj.theta    = cParams.theta;
            obj.mesh     = cParams.mesh;
        end
        
        function computeDilation(obj)
            s.theta = obj.theta;
            s.mesh  = obj.mesh;
            d = DilationFieldComputer(s);
            obj.dilation = d.compute();           
        end
        
        function phi = computeFirstComponent(obj)
           iDim = 1; 
           phi = obj.computeComponent(iDim);
        end

        function phi = computeSecondComponent(obj)
           iDim = 2; 
           phi = obj.computeComponent(iDim);
        end
              
        function phi = computeComponent(obj,idim)
            s.fGauss = obj.computeVectorComponent(idim);
            s.mesh   = obj.mesh;
            varProb  = MinimumGradFieldWithVectorInL2(s);            
            phi = varProb.solve();
        end
        
        function b = computeVector(obj,idim)
           er = exp(obj.dilation); 
           erCos = er.*cos(obj.theta);
           erSin = er.*sin(obj.theta);
           Q(1,1,:) = erCos;
           Q(1,2,:) = -erSin;
           Q(2,1,:) = erSin;
           Q(2,2,:) = erCos;
           b = squeezeParticular(Q(:,idim,:),2);            
        end
        
        function fG = computeVectorComponent(obj,idim)
            b = obj.computeVector(idim);            
            q = Quadrature.set(obj.mesh.type);
            q.computeQuadrature('LINEAR');
            xGauss = q.posgp;
            fG = zeros(obj.mesh.ndim,q.ngaus,obj.mesh.nelem);
            for idim = 1:obj.mesh.ndim
                s.fNodes = b(idim,:)';
                s.connec = obj.mesh.connec;
                s.type   = obj.mesh.type;
                f = FeFunction(s);
                fG(idim,:,:) = f.interpolateFunction(xGauss);            
            end     
        end        
        
    end
    
end